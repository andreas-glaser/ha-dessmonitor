name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  validate-version:
    name: Validate version format
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: "Extract version"
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          
          # Validate SemVer format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must follow SemVer format (x.y.z)"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"

  release:
    name: Prepare release
    runs-on: ubuntu-latest
    needs: validate-version
    permissions:
      contents: write
    steps:
      - name: "Checkout the repository"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Validate changelog entry exists"
        shell: bash
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "Error: No changelog entry found for version $VERSION"
            echo "Please add a changelog entry in CHANGELOG.md"
            exit 1
          fi

      - name: "Update version files"
        shell: bash
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Update VERSION file
          echo "$VERSION" > VERSION
          
          # Update manifest.json
          yq eval -i -P ".version=\"$VERSION\"" \
            ${{ github.workspace }}/custom_components/dessmonitor/manifest.json
          
          echo "Updated version to: $VERSION"

      - name: "Validate integration structure"
        shell: bash
        run: |
          # Ensure all required files exist
          REQUIRED_FILES=(
            "custom_components/dessmonitor/__init__.py"
            "custom_components/dessmonitor/manifest.json"
            "custom_components/dessmonitor/config_flow.py"
            "custom_components/dessmonitor/const.py"
            "custom_components/dessmonitor/sensor.py"
            "custom_components/dessmonitor/strings.json"
            "hacs.json"
            "README.md"
            "CHANGELOG.md"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "Error: Required file missing: $file"
              exit 1
            fi
          done
          
          echo "âœ… All required files present"

      - name: "Create integration ZIP"
        shell: bash
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          cd ${{ github.workspace }}/custom_components/dessmonitor
          
          # Create ZIP with version in filename
          zip -r "dessmonitor-$VERSION.zip" . \
            -x "*.pyc" \
            -x "__pycache__/*" \
            -x ".*" \
            -x "README.md"
          
          # Also create generic filename for HACS compatibility
          cp "dessmonitor-$VERSION.zip" "dessmonitor.zip"
          
          echo "Created release packages:"
          ls -la *.zip

      - name: "Generate release notes"
        shell: bash
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Extract changelog section for this version
          awk "/^## \[$VERSION\]/,/^## \[/" CHANGELOG.md | \
            head -n -1 | tail -n +2 > release-notes.md
          
          echo "Generated release notes:"
          cat release-notes.md

      - name: "Upload release assets"
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.validate-version.outputs.version }}"
          name: "Release v${{ needs.validate-version.outputs.version }}"
          body_path: release-notes.md
          files: |
            custom_components/dessmonitor/dessmonitor-${{ needs.validate-version.outputs.version }}.zip
            custom_components/dessmonitor/dessmonitor.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Commit version updates"
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add VERSION custom_components/dessmonitor/manifest.json
          git commit -m "Bump version to $VERSION"
          git push origin main
          
          # Create and push tag
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"